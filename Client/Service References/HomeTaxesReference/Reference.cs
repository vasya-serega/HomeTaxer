//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HomeTaxer.Client.HomeTaxesReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictOptions", Namespace="http://schemas.datacontract.org/2004/07/HomeTaxer.Common.Schemas")]
    [System.SerializableAttribute()]
    public partial class DictOptions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> AccountNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<HomeTaxer.Client.HomeTaxesReference.Category> CategoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> CurrenciesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> AccountNames {
            get {
                return this.AccountNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNamesField, value) != true)) {
                    this.AccountNamesField = value;
                    this.RaisePropertyChanged("AccountNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<HomeTaxer.Client.HomeTaxesReference.Category> Categories {
            get {
                return this.CategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesField, value) != true)) {
                    this.CategoriesField = value;
                    this.RaisePropertyChanged("Categories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> Currencies {
            get {
                return this.CurrenciesField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrenciesField, value) != true)) {
                    this.CurrenciesField = value;
                    this.RaisePropertyChanged("Currencies");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/HomeTaxer.Common.Model")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> SubCategoriesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> SubCategories {
            get {
                return this.SubCategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.SubCategoriesField, value) != true)) {
                    this.SubCategoriesField = value;
                    this.RaisePropertyChanged("SubCategories");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OborotDirection", Namespace="http://schemas.datacontract.org/2004/07/HomeTaxer.Common.Enums")]
    public enum OborotDirection : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Costs = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Incomes = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Oborot", Namespace="http://schemas.datacontract.org/2004/07/HomeTaxer.Common.Schemas")]
    [System.SerializableAttribute()]
    public partial class Oborot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountNameIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrencyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OborotIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SubCategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SummaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountNameId {
            get {
                return this.AccountNameIdField;
            }
            set {
                if ((this.AccountNameIdField.Equals(value) != true)) {
                    this.AccountNameIdField = value;
                    this.RaisePropertyChanged("AccountNameId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrencyId {
            get {
                return this.CurrencyIdField;
            }
            set {
                if ((this.CurrencyIdField.Equals(value) != true)) {
                    this.CurrencyIdField = value;
                    this.RaisePropertyChanged("CurrencyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note {
            get {
                return this.NoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteField, value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OborotId {
            get {
                return this.OborotIdField;
            }
            set {
                if ((this.OborotIdField.Equals(value) != true)) {
                    this.OborotIdField = value;
                    this.RaisePropertyChanged("OborotId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubCategory {
            get {
                return this.SubCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.SubCategoryField, value) != true)) {
                    this.SubCategoryField = value;
                    this.RaisePropertyChanged("SubCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SubCategoryId {
            get {
                return this.SubCategoryIdField;
            }
            set {
                if ((this.SubCategoryIdField.Equals(value) != true)) {
                    this.SubCategoryIdField = value;
                    this.RaisePropertyChanged("SubCategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Summa {
            get {
                return this.SummaField;
            }
            set {
                if ((this.SummaField.Equals(value) != true)) {
                    this.SummaField = value;
                    this.RaisePropertyChanged("Summa");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HomeTaxesReference.IHomeTaxesService")]
    public interface IHomeTaxesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/GetUserId", ReplyAction="http://tempuri.org/IHomeTaxesService/GetUserIdResponse")]
        int GetUserId(string login, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/GetUserId", ReplyAction="http://tempuri.org/IHomeTaxesService/GetUserIdResponse")]
        System.Threading.Tasks.Task<int> GetUserIdAsync(string login, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/GetDictOptions", ReplyAction="http://tempuri.org/IHomeTaxesService/GetDictOptionsResponse")]
        HomeTaxer.Client.HomeTaxesReference.DictOptions GetDictOptions(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/GetDictOptions", ReplyAction="http://tempuri.org/IHomeTaxesService/GetDictOptionsResponse")]
        System.Threading.Tasks.Task<HomeTaxer.Client.HomeTaxesReference.DictOptions> GetDictOptionsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/GetOborots", ReplyAction="http://tempuri.org/IHomeTaxesService/GetOborotsResponse")]
        System.Collections.Generic.List<HomeTaxer.Client.HomeTaxesReference.Oborot> GetOborots(int userId, System.Nullable<System.DateTime> beginDate, System.Nullable<System.DateTime> endDate, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/GetOborots", ReplyAction="http://tempuri.org/IHomeTaxesService/GetOborotsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<HomeTaxer.Client.HomeTaxesReference.Oborot>> GetOborotsAsync(int userId, System.Nullable<System.DateTime> beginDate, System.Nullable<System.DateTime> endDate, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/GetAllOborots", ReplyAction="http://tempuri.org/IHomeTaxesService/GetAllOborotsResponse")]
        System.Collections.Generic.List<HomeTaxer.Client.HomeTaxesReference.Oborot> GetAllOborots(int accountNameId, int userId, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/GetAllOborots", ReplyAction="http://tempuri.org/IHomeTaxesService/GetAllOborotsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<HomeTaxer.Client.HomeTaxesReference.Oborot>> GetAllOborotsAsync(int accountNameId, int userId, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/InsertOborot", ReplyAction="http://tempuri.org/IHomeTaxesService/InsertOborotResponse")]
        int InsertOborot(int userId, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction, HomeTaxer.Client.HomeTaxesReference.Oborot newOborot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/InsertOborot", ReplyAction="http://tempuri.org/IHomeTaxesService/InsertOborotResponse")]
        System.Threading.Tasks.Task<int> InsertOborotAsync(int userId, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction, HomeTaxer.Client.HomeTaxesReference.Oborot newOborot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/UpdateOborot", ReplyAction="http://tempuri.org/IHomeTaxesService/UpdateOborotResponse")]
        void UpdateOborot(HomeTaxer.Client.HomeTaxesReference.Oborot updOborot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/UpdateOborot", ReplyAction="http://tempuri.org/IHomeTaxesService/UpdateOborotResponse")]
        System.Threading.Tasks.Task UpdateOborotAsync(HomeTaxer.Client.HomeTaxesReference.Oborot updOborot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/DeleteOborot", ReplyAction="http://tempuri.org/IHomeTaxesService/DeleteOborotResponse")]
        void DeleteOborot(int oborotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/DeleteOborot", ReplyAction="http://tempuri.org/IHomeTaxesService/DeleteOborotResponse")]
        System.Threading.Tasks.Task DeleteOborotAsync(int oborotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/InsertAccount", ReplyAction="http://tempuri.org/IHomeTaxesService/InsertAccountResponse")]
        int InsertAccount(int userId, string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/InsertAccount", ReplyAction="http://tempuri.org/IHomeTaxesService/InsertAccountResponse")]
        System.Threading.Tasks.Task<int> InsertAccountAsync(int userId, string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/UpdateAccount", ReplyAction="http://tempuri.org/IHomeTaxesService/UpdateAccountResponse")]
        void UpdateAccount(int accountId, string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/UpdateAccount", ReplyAction="http://tempuri.org/IHomeTaxesService/UpdateAccountResponse")]
        System.Threading.Tasks.Task UpdateAccountAsync(int accountId, string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/DeleteAccount", ReplyAction="http://tempuri.org/IHomeTaxesService/DeleteAccountResponse")]
        void DeleteAccount(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeTaxesService/DeleteAccount", ReplyAction="http://tempuri.org/IHomeTaxesService/DeleteAccountResponse")]
        System.Threading.Tasks.Task DeleteAccountAsync(int accountId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHomeTaxesServiceChannel : HomeTaxer.Client.HomeTaxesReference.IHomeTaxesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HomeTaxesServiceClient : System.ServiceModel.ClientBase<HomeTaxer.Client.HomeTaxesReference.IHomeTaxesService>, HomeTaxer.Client.HomeTaxesReference.IHomeTaxesService {
        
        public HomeTaxesServiceClient() {
        }
        
        public HomeTaxesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HomeTaxesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HomeTaxesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HomeTaxesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetUserId(string login, string pass) {
            return base.Channel.GetUserId(login, pass);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIdAsync(string login, string pass) {
            return base.Channel.GetUserIdAsync(login, pass);
        }
        
        public HomeTaxer.Client.HomeTaxesReference.DictOptions GetDictOptions(int userId) {
            return base.Channel.GetDictOptions(userId);
        }
        
        public System.Threading.Tasks.Task<HomeTaxer.Client.HomeTaxesReference.DictOptions> GetDictOptionsAsync(int userId) {
            return base.Channel.GetDictOptionsAsync(userId);
        }
        
        public System.Collections.Generic.List<HomeTaxer.Client.HomeTaxesReference.Oborot> GetOborots(int userId, System.Nullable<System.DateTime> beginDate, System.Nullable<System.DateTime> endDate, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction) {
            return base.Channel.GetOborots(userId, beginDate, endDate, direction);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<HomeTaxer.Client.HomeTaxesReference.Oborot>> GetOborotsAsync(int userId, System.Nullable<System.DateTime> beginDate, System.Nullable<System.DateTime> endDate, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction) {
            return base.Channel.GetOborotsAsync(userId, beginDate, endDate, direction);
        }
        
        public System.Collections.Generic.List<HomeTaxer.Client.HomeTaxesReference.Oborot> GetAllOborots(int accountNameId, int userId, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction) {
            return base.Channel.GetAllOborots(accountNameId, userId, direction);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<HomeTaxer.Client.HomeTaxesReference.Oborot>> GetAllOborotsAsync(int accountNameId, int userId, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction) {
            return base.Channel.GetAllOborotsAsync(accountNameId, userId, direction);
        }
        
        public int InsertOborot(int userId, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction, HomeTaxer.Client.HomeTaxesReference.Oborot newOborot) {
            return base.Channel.InsertOborot(userId, direction, newOborot);
        }
        
        public System.Threading.Tasks.Task<int> InsertOborotAsync(int userId, HomeTaxer.Client.HomeTaxesReference.OborotDirection direction, HomeTaxer.Client.HomeTaxesReference.Oborot newOborot) {
            return base.Channel.InsertOborotAsync(userId, direction, newOborot);
        }
        
        public void UpdateOborot(HomeTaxer.Client.HomeTaxesReference.Oborot updOborot) {
            base.Channel.UpdateOborot(updOborot);
        }
        
        public System.Threading.Tasks.Task UpdateOborotAsync(HomeTaxer.Client.HomeTaxesReference.Oborot updOborot) {
            return base.Channel.UpdateOborotAsync(updOborot);
        }
        
        public void DeleteOborot(int oborotId) {
            base.Channel.DeleteOborot(oborotId);
        }
        
        public System.Threading.Tasks.Task DeleteOborotAsync(int oborotId) {
            return base.Channel.DeleteOborotAsync(oborotId);
        }
        
        public int InsertAccount(int userId, string accountName) {
            return base.Channel.InsertAccount(userId, accountName);
        }
        
        public System.Threading.Tasks.Task<int> InsertAccountAsync(int userId, string accountName) {
            return base.Channel.InsertAccountAsync(userId, accountName);
        }
        
        public void UpdateAccount(int accountId, string accountName) {
            base.Channel.UpdateAccount(accountId, accountName);
        }
        
        public System.Threading.Tasks.Task UpdateAccountAsync(int accountId, string accountName) {
            return base.Channel.UpdateAccountAsync(accountId, accountName);
        }
        
        public void DeleteAccount(int accountId) {
            base.Channel.DeleteAccount(accountId);
        }
        
        public System.Threading.Tasks.Task DeleteAccountAsync(int accountId) {
            return base.Channel.DeleteAccountAsync(accountId);
        }
    }
}
